What happens when you initialize a repository? Why do you need to do it?
	.git file is introduced. To let git know that it is a git repo.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	Staging area combines number of files that are to be committed 
	as a single commit. It makes it easy for the programmer to
	keep track of logically similar files.

How can you use the staging area to make sure you have one commit per logical
change?
	By using git diff --staged will show the difference 
	between files in prev commit and the gonna be committed
	files.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	It woud be useful in situations where we might want to add up 
	another functionality in the program and we are not sure if it will work or not.

How do the diagrams help you visualize the branch structure?
	They give an overview of how the commit flow happpens in a project and give a tree like structure to easily visualise this.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	The result of merging two branches is the combination of the files at the two branches and the file initially before the creation of the branch. It is easy to visualise where all the commit logs and files are coming from.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	Automatic merging comes handy when the two commits have different parts of program altered while manual merging helps in seeing what is the difference when same parts of program are changed and then choose the one that makes more sense.